AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for EC2 Auto Scaling group with load balancer'

Parameters:
  InstanceType:
    Type: String
    Default: 't3.micro'
    Description: 'The EC2 instance type'
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2'
    Description: 'The latest Amazon Linux 2023 AMI ID'

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: 'MyKeyPair'

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: 'MyVPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'PublicSubnet1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'PublicSubnet2'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'PublicRouteTable'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for the load balancer'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for the web servers'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: 'WebServerLaunchTemplate'
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPair
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
        UserData:
          Fn::Base64: |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            # Get instance metadata
            instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            availability_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)

            # Post message to Discord webhook
            webhook_url="https://discord.com/api/webhooks/1230543969708937246/PfqOAqrJ6Ntk-MRQ0TlwppIgDU2D3Oj6fr7-aMf8C1Tkn7QgoA3klqleNIRJGs5fxhOT"
            message="Instance $instance_id launched in $availability_zone"
            curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"$message\"}" $webhook_url

            service httpd start
            chkconfig httpd on

            instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            instance_type=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)
            availability_zone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
            
            cat > /var/www/html/index.html <<EOF
            <html>
            <head><title>Server Information</title></head>
            <body>
            <h1>Server Information</h1>
            <p>Instance ID: $instance_id</p>
            <p>Instance Type: $instance_type</p>
            <p>Availability Zone: $availability_zone</p>
            </body>
            </html>
            EOF
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref WebServerTargetGroup

Outputs:
  VPCId:
    Description: 'The ID of the VPC'
    Value: !Ref VPC
  AutoScalingGroupName:
    Description: 'The name of the Auto Scaling group'
    Value: !Ref AutoScalingGroup
  KeyPairName:
    Description: 'The name of the created key pair'
    Value: !Ref KeyPair
  LoadBalancerDNSName:
    Description: 'The DNS name of the load balancer'
    Value: !GetAtt LoadBalancer.DNSName